{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Copy of Copy of DL_proj.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "toc_visible": true,
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.8"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ypeng22/DLFinal/blob/main/DL_proj_temp.ipynb%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jEk7c_MDbSgX"
      },
      "source": [
        "#Setup"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WZyv_9X0kb6s",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3c663ea5-f401-49ef-b55e-61c7569ba8c0"
      },
      "source": [
        "!pip install plantcv\n",
        "!pip install c3d"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: plantcv in /usr/local/lib/python3.7/dist-packages (3.12.0)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.7/dist-packages (from plantcv) (1.4.1)\n",
            "Requirement already satisfied: numpy>=1.11 in /usr/local/lib/python3.7/dist-packages (from plantcv) (1.19.5)\n",
            "Requirement already satisfied: dask in /usr/local/lib/python3.7/dist-packages (from plantcv) (2.12.0)\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.7/dist-packages (from plantcv) (1.1.5)\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.7/dist-packages (from plantcv) (0.22.2.post1)\n",
            "Requirement already satisfied: matplotlib>=1.5 in /usr/local/lib/python3.7/dist-packages (from plantcv) (3.2.2)\n",
            "Requirement already satisfied: opencv-python<4,>=3.4 in /usr/local/lib/python3.7/dist-packages (from plantcv) (3.4.13.47)\n",
            "Requirement already satisfied: dask-jobqueue in /usr/local/lib/python3.7/dist-packages (from plantcv) (0.7.2)\n",
            "Requirement already satisfied: plotnine in /usr/local/lib/python3.7/dist-packages (from plantcv) (0.6.0)\n",
            "Requirement already satisfied: scikit-image in /usr/local/lib/python3.7/dist-packages (from plantcv) (0.16.2)\n",
            "Requirement already satisfied: python-dateutil in /usr/local/lib/python3.7/dist-packages (from plantcv) (2.8.1)\n",
            "Requirement already satisfied: pytz>=2017.2 in /usr/local/lib/python3.7/dist-packages (from pandas->plantcv) (2018.9)\n",
            "Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.7/dist-packages (from scikit-learn->plantcv) (1.0.1)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=1.5->plantcv) (1.3.1)\n",
            "Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=1.5->plantcv) (2.4.7)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=1.5->plantcv) (0.10.0)\n",
            "Requirement already satisfied: distributed>=2.19 in /usr/local/lib/python3.7/dist-packages (from dask-jobqueue->plantcv) (2021.4.1)\n",
            "Requirement already satisfied: statsmodels>=0.9.0 in /usr/local/lib/python3.7/dist-packages (from plotnine->plantcv) (0.10.2)\n",
            "Requirement already satisfied: mizani>=0.6.0 in /usr/local/lib/python3.7/dist-packages (from plotnine->plantcv) (0.6.0)\n",
            "Requirement already satisfied: patsy>=0.4.1 in /usr/local/lib/python3.7/dist-packages (from plotnine->plantcv) (0.5.1)\n",
            "Requirement already satisfied: descartes>=1.1.0 in /usr/local/lib/python3.7/dist-packages (from plotnine->plantcv) (1.1.0)\n",
            "Requirement already satisfied: imageio>=2.3.0 in /usr/local/lib/python3.7/dist-packages (from scikit-image->plantcv) (2.4.1)\n",
            "Requirement already satisfied: networkx>=2.0 in /usr/local/lib/python3.7/dist-packages (from scikit-image->plantcv) (2.5.1)\n",
            "Requirement already satisfied: pillow>=4.3.0 in /usr/local/lib/python3.7/dist-packages (from scikit-image->plantcv) (7.1.2)\n",
            "Requirement already satisfied: PyWavelets>=0.4.0 in /usr/local/lib/python3.7/dist-packages (from scikit-image->plantcv) (1.1.1)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil->plantcv) (1.15.0)\n",
            "Requirement already satisfied: toolz>=0.8.2 in /usr/local/lib/python3.7/dist-packages (from distributed>=2.19->dask-jobqueue->plantcv) (0.11.1)\n",
            "Requirement already satisfied: click>=6.6 in /usr/local/lib/python3.7/dist-packages (from distributed>=2.19->dask-jobqueue->plantcv) (7.1.2)\n",
            "Requirement already satisfied: psutil>=5.0 in /usr/local/lib/python3.7/dist-packages (from distributed>=2.19->dask-jobqueue->plantcv) (5.4.8)\n",
            "Requirement already satisfied: setuptools in /usr/local/lib/python3.7/dist-packages (from distributed>=2.19->dask-jobqueue->plantcv) (56.0.0)\n",
            "Requirement already satisfied: tornado>=5; python_version < \"3.8\" in /usr/local/lib/python3.7/dist-packages (from distributed>=2.19->dask-jobqueue->plantcv) (5.1.1)\n",
            "Requirement already satisfied: cloudpickle>=1.5.0 in /usr/local/lib/python3.7/dist-packages (from distributed>=2.19->dask-jobqueue->plantcv) (1.6.0)\n",
            "Requirement already satisfied: pyyaml in /usr/local/lib/python3.7/dist-packages (from distributed>=2.19->dask-jobqueue->plantcv) (3.13)\n",
            "Requirement already satisfied: tblib>=1.6.0 in /usr/local/lib/python3.7/dist-packages (from distributed>=2.19->dask-jobqueue->plantcv) (1.7.0)\n",
            "Requirement already satisfied: msgpack>=0.6.0 in /usr/local/lib/python3.7/dist-packages (from distributed>=2.19->dask-jobqueue->plantcv) (1.0.2)\n",
            "Requirement already satisfied: zict>=0.1.3 in /usr/local/lib/python3.7/dist-packages (from distributed>=2.19->dask-jobqueue->plantcv) (2.0.0)\n",
            "Requirement already satisfied: sortedcontainers!=2.0.0,!=2.0.1 in /usr/local/lib/python3.7/dist-packages (from distributed>=2.19->dask-jobqueue->plantcv) (2.3.0)\n",
            "Requirement already satisfied: palettable in /usr/local/lib/python3.7/dist-packages (from mizani>=0.6.0->plotnine->plantcv) (3.3.0)\n",
            "Requirement already satisfied: decorator<5,>=4.3 in /usr/local/lib/python3.7/dist-packages (from networkx>=2.0->scikit-image->plantcv) (4.4.2)\n",
            "Requirement already satisfied: heapdict in /usr/local/lib/python3.7/dist-packages (from zict>=0.1.3->distributed>=2.19->dask-jobqueue->plantcv) (1.0.1)\n",
            "Requirement already satisfied: c3d in /usr/local/lib/python3.7/dist-packages (0.3.0)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from c3d) (1.19.5)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_gnveOQLzZs-"
      },
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import c3d\n",
        "import cv2\n",
        "import torch\n",
        "import torch.nn as nn\n",
        "from torch.utils.data import Dataset, DataLoader\n",
        "import os\n",
        "from plantcv import plantcv as pcv\n",
        "from scipy import ndimage\n",
        "import torchvision"
      ],
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WCAC2zBMNOjE",
        "outputId": "8b1bf0bb-bd8e-4522-e5f3-f9ad7e6ec251"
      },
      "source": [
        "## Mount Google Drive Data (If using Google Colaboratory)\n",
        "try:\n",
        "    from google.colab import drive\n",
        "    drive.mount('/content/gdrive')\n",
        "except:\n",
        "    print(\"Mounting Failed.\")\n"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Drive already mounted at /content/gdrive; to attempt to forcibly remount, call drive.mount(\"/content/gdrive\", force_remount=True).\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "prEI4BySN1tM"
      },
      "source": [
        "data_dir = \"/content/gdrive/MyDrive/BerkeleyMHAD/\"\n",
        "subjects = ['S01', 'S02', 'S03', 'S04', 'S05','S06', 'S07', 'S08', 'S09', 'S10', 'S11', 'S12']\n",
        "actions = ['A01', 'A02', 'A03', 'A04', 'A05','A06', 'A07', 'A08', 'A09', 'A10', 'A11']\n",
        "reps = ['R01', 'R02', 'R03', 'R04', 'R05']"
      ],
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uPQyI2ZUbV7Z"
      },
      "source": [
        "#LSTM on Skeleton Data"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pSGM-xw4cj4_"
      },
      "source": [
        "################ Dataloader for Berkeley Mocap Optical Data #################\n",
        "\n",
        "def c3d2array(loc: str, frame_rate):\n",
        "    \"\"\"\n",
        "    Takes in the file location of the c3d file as a string and returns a \n",
        "    numpy array w/ the sensor data\n",
        "    Array Shape: Num_frames x 43 x 3 \n",
        "      43 corresponds to the number of nodes on the person\n",
        "      3 corresponds to spatial coordinates of the nodes\n",
        "    \"\"\"\n",
        "    point_series = []\n",
        "    reader = c3d.Reader(open(loc, 'rb'))\n",
        "    for i, points, analog in reader.read_frames():     \n",
        "        if i % frame_rate == 0: ## Set Frame Rate to approximately 22 Hz instead of 480 Hz\n",
        "            point_series.append(points[:, 0:3])\n",
        "    point_series = np.array(point_series)\n",
        "    return point_series\n",
        "\n",
        "class BerkeleyMocapOpticalDataset(Dataset):\n",
        "    \"\"\"Berkeley Mocap Optical Dataset.\"\"\"\n",
        "\n",
        "    def __init__(self, root_dir, train, frame_rate, transform=None):\n",
        "        \"\"\"\n",
        "        Args:\n",
        "            root_dir (string): Directory with all the data\n",
        "            train (string): has to be one of \"train\", \"test\", or \"val\"\n",
        "            frame_rate (integer): In Hz \n",
        "            transform (callable, optional): Optional transform to be applied\n",
        "                on a sample.\n",
        "        \"\"\"\n",
        "        self.root_dir = root_dir\n",
        "        if train == 'train':\n",
        "            self.list_c3d = [file for file in os.listdir(root_dir) if (os.path.isfile(os.path.join(root_dir, file)) and file[-1] != 't' and int(file[5:7]) < 9) ] #list of all the c3d file names for the first 8 subjects\n",
        "        elif train == 'test':\n",
        "            self.list_c3d = [file for file in os.listdir(root_dir) if (os.path.isfile(os.path.join(root_dir, file)) and file[-1] != 't' and int(file[5:7]) > 8 and int(file[5:7]) < 12) ] #list of all the c3d file names for the subjects 9, 10, 11\n",
        "        else:\n",
        "            self.list_c3d = [file for file in os.listdir(root_dir) if (os.path.isfile(os.path.join(root_dir, file)) and file[-1] != 't' and int(file[5:7]) == 12) ] #list of all the c3d file names for the subject 12\n",
        "        self.frame_rate = frame_rate\n",
        "        self.transform = transform\n",
        "\n",
        "    def __len__(self):\n",
        "        return len(self.list_c3d)\n",
        "\n",
        "    def __getitem__(self, idx):\n",
        "        if torch.is_tensor(idx):\n",
        "            idx = idx.tolist()\n",
        "        c3d_file_location = os.path.join(self.root_dir,\n",
        "                                self.list_c3d[idx])\n",
        "        sample = c3d2array(c3d_file_location, self.frame_rate)\n",
        "        label_location = c3d_file_location.find('_a')\n",
        "        if label_location == -1: # FUCK T-POSE\n",
        "            label = 12\n",
        "        else: \n",
        "            label = int(c3d_file_location[label_location+2:label_location+4])\n",
        "        if self.transform:\n",
        "            sample = self.transform(sample)\n",
        "        # Flatten Samples \n",
        "        sample = torch.transpose(sample, 0, 1)\n",
        "        sample = torch.flatten(sample, 1, 2)\n",
        "        sample = torch.unsqueeze(sample, 0)\n",
        "        sample = sample.float()\n",
        "        # I think labels should go from 0 through 11 since we are using argmax later for loss/accuracy\n",
        "        return sample, label - 1\n",
        "\n",
        "\n",
        "############### Compute Mean and SD across the dataset #############\n",
        "## If you wish to uncomment the code below and rerun it, you might have to comment out the three lines which cflatten the sample in the class above\n",
        "'''transform = None\n",
        "root_dir = data_dir + 'Mocap/OpticalData'\n",
        "frame_rate = 1\n",
        "\n",
        "dataloader = BerkeleyMocapOpticalDataset(root_dir, \"train\", 1)\n",
        "x_list = []\n",
        "y_list = []\n",
        "z_list = []\n",
        "\n",
        "for sample,_ in dataloader:\n",
        "  x_list.append(np.ndarray.flatten(sample[:,:,0]))\n",
        "  y_list.append(np.ndarray.flatten(sample[:,:,1]))\n",
        "  z_list.append(np.ndarray.flatten(sample[:,:,2]))\n",
        "\n",
        "x_list = np.concatenate(np.array(x_list))\n",
        "y_list = np.concatenate(np.array(y_list))\n",
        "z_list = np.concatenate(np.array(z_list))\n",
        "x_mean = np.mean(x_list)\n",
        "x_sd = np.std(x_list)\n",
        "y_mean = np.mean(y_list)\n",
        "y_sd = np.std(y_list)\n",
        "z_mean = np.mean(z_list)\n",
        "z_sd = np.std(z_list)\n",
        "print([x_mean, y_mean, z_mean, x_sd, y_sd, z_sd])'''\n",
        "\n",
        "############### Define a transform with mean, std, and tensor ############\n",
        "## So we don't need to rerun for the mean and standard deviations every time\n",
        "x_mean, x_sd, y_mean, y_sd, z_mean, z_sd = -455.09898495222086, 245.84348947768748, 148.47916727630624, 183.09031602408763, 814.4396506806088, 538.2824468734605\n",
        "transform = torchvision.transforms.Compose([\n",
        "  torchvision.transforms.ToTensor(),\n",
        "  torchvision.transforms.Normalize((x_mean, y_mean, z_mean), (x_sd, y_sd, z_sd)),\n",
        "])\n",
        "\n",
        "\n",
        "############# Final Dataloaders ####################\n",
        "root_dir = data_dir + 'Mocap/OpticalData'\n",
        "frame_rate = 22\n",
        "train_dataloader = BerkeleyMocapOpticalDataset(root_dir, \"train\", frame_rate, transform=transform)\n",
        "test_dataloader = BerkeleyMocapOpticalDataset(root_dir, \"test\", frame_rate, transform=transform)\n",
        "val_dataloader = BerkeleyMocapOpticalDataset(root_dir, \"val\", frame_rate, transform=transform)\n"
      ],
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Ehz48DvAcqVk",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 761
        },
        "outputId": "d3beed77-33f0-4029-bbcb-a688a87ccc5e"
      },
      "source": [
        "############ Test The Dataloader ######################\n",
        "\n",
        "## This code is for case in which the sample is NOT flattened\n",
        "'''i = 3\n",
        "for sample,_ in train_dataloader:\n",
        "  if i == 0:\n",
        "    break\n",
        "  i = i - 1\n",
        "  frame = 1\n",
        "  xs, ys, zs = sample[0, frame, :], sample[1, frame, :], sample[2, frame, :]\n",
        "  plt.figure()\n",
        "  plt.scatter(xs, zs)\n",
        "  plt.axis('scaled')\n",
        "  xs, ys, zs = sample[0, frame+10, :], sample[1, frame+10, :], sample[2, frame+10, :]\n",
        "  plt.scatter(xs, zs)\n",
        "  plt.axis('scaled')'''\n",
        "\n",
        "## This code is for the case in which the sample IS flattened\n",
        "i = 3\n",
        "for sample,_ in train_dataloader:\n",
        "  if i == 0:\n",
        "    break\n",
        "  i = i - 1\n",
        "  frame = 1\n",
        "  xs, ys, zs = sample[0, frame, 0:43], sample[0, frame, 43:86], sample[0, frame, 86:]\n",
        "  plt.figure()\n",
        "  plt.scatter(xs, zs)\n",
        "  plt.axis('scaled')\n",
        "  xs, ys, zs = sample[0, frame+10, 0:43], sample[0, frame+10, 43:86], sample[0, frame+10, 86:]\n",
        "  plt.scatter(xs, zs)\n",
        "  plt.axis('scaled')"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xNccTDNGxYdG"
      },
      "source": [
        "class skeletonLSTM(nn.Module):\n",
        "    def __init__(self, classes):\n",
        "        super(skeletonLSTM, self).__init__()\n",
        "        self.n_hidden = 100\n",
        "        self.n_layers = 2\n",
        "        self.l_lstm = torch.nn.LSTM(input_size = 129, \n",
        "                                 hidden_size = self.n_hidden,\n",
        "                                 num_layers = self.n_layers, \n",
        "                                 batch_first = True)\n",
        "        self.fc1 = nn.Linear(100, 50)\n",
        "        self.fc2 = nn.Linear(50, classes)\n",
        "        self.relu = nn.ReLU()\n",
        "    def forward(self, x):\n",
        "        #intialize lstm hidden state\n",
        "        hidden_state = torch.zeros(self.n_layers, 1, self.n_hidden).cuda()\n",
        "        cell_state = torch.zeros(self.n_layers, 1, self.n_hidden).cuda()\n",
        "        self.hidden = (hidden_state, cell_state)      \n",
        "        #print(x.shape)\n",
        "        lstm_out, _ = self.l_lstm(x, self.hidden) #lstm_out shape is batch_size, seq len, hidden state\n",
        "        lstm_out = lstm_out[:,-1,:]\n",
        "        lstm_out = self.relu(self.fc1(lstm_out.squeeze()))\n",
        "        lstm_out = self.fc2(lstm_out)\n",
        "        return lstm_out\n",
        "    "
      ],
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mYYtqLfyyC0Z",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1648ef45-62b9-49ee-d696-764b21f47547"
      },
      "source": [
        " num_epochs = 50\n",
        " num_classes = 11\n",
        " model = skeletonLSTM(num_classes)\n",
        " model.cuda()\n",
        " loss_func = nn.CrossEntropyLoss()\n",
        " optimizer = torch.optim.Adam(model.parameters())\n",
        " \n",
        " train_loss_vec = []\n",
        " val_loss_vec = []\n",
        " for epoch in range(num_epochs):\n",
        "    train_loss_for_epoch = []\n",
        "    val_loss_for_epoch = []\n",
        "    ########################### Training #####################################\n",
        "    print(\"\\nEPOCH \" +str(epoch+1)+\" of \"+str(num_epochs)+\"\\n\")\n",
        "    for inputs, labels in train_dataloader:\n",
        "          inputs = inputs.cuda()\n",
        "          model.train()\n",
        "          if labels == 11: #FUCK T-POSE\n",
        "              continue\n",
        "          labels = torch.Tensor([labels]).cuda()\n",
        "          predictions = model(inputs).unsqueeze(0)\n",
        "          loss = loss_func(predictions, labels.long())\n",
        "          optimizer.zero_grad()\n",
        "          loss.backward()\n",
        "          optimizer.step()\n",
        "          train_loss_for_epoch.append(loss.item())\n",
        "\n",
        "    train_loss_vec.append( sum(train_loss_for_epoch) / len(train_loss_for_epoch) )\n",
        "    for inputs, labels in val_dataloader:\n",
        "          inputs = inputs.cuda()\n",
        "          model.eval()\n",
        "          if labels == 11: #FUCK T-POSE\n",
        "              continue\n",
        "          labels = torch.Tensor([labels]).cuda()\n",
        "          predictions = model(inputs).unsqueeze(0)\n",
        "          loss = loss_func(predictions, labels.long())\n",
        "          val_loss_for_epoch.append(loss.item())\n",
        "          if val_loss_for_epoch[-1] == min(val_loss_for_epoch):\n",
        "              torch.save(model, '/content/gdrive/MyDrive/best_model.pth')\n",
        "    val_loss_vec.append(sum(val_loss_for_epoch) / len(val_loss_for_epoch) )\n",
        "    print(\"The training loss for Epoch \" + str(epoch + 1) + \" is \" + str(train_loss_vec[-1]))\n",
        "    print(\"The validation loss for Epoch \" + str(epoch + 1) + \" is \" + str(val_loss_vec[-1]))\n"
      ],
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "\n",
            "EPOCH 1 of 50\n",
            "\n",
            "The training loss for Epoch 1 is 2.2070627585732314\n",
            "The validation loss for Epoch 1 is 2.220439647544514\n",
            "\n",
            "EPOCH 2 of 50\n",
            "\n",
            "The training loss for Epoch 2 is 1.7703523453386556\n",
            "The validation loss for Epoch 2 is 1.7010963594837283\n",
            "\n",
            "EPOCH 3 of 50\n",
            "\n",
            "The training loss for Epoch 3 is 1.8283630405899545\n",
            "The validation loss for Epoch 3 is 1.6609510464509103\n",
            "\n",
            "EPOCH 4 of 50\n",
            "\n",
            "The training loss for Epoch 4 is 1.59000293105567\n",
            "The validation loss for Epoch 4 is 1.4482743420045485\n",
            "\n",
            "EPOCH 5 of 50\n",
            "\n",
            "The training loss for Epoch 5 is 1.486603253124759\n",
            "The validation loss for Epoch 5 is 1.3714607238213912\n",
            "\n",
            "EPOCH 6 of 50\n",
            "\n",
            "The training loss for Epoch 6 is 1.4611921449373386\n",
            "The validation loss for Epoch 6 is 1.3666504514303102\n",
            "\n",
            "EPOCH 7 of 50\n",
            "\n",
            "The training loss for Epoch 7 is 1.4284010412768178\n",
            "The validation loss for Epoch 7 is 1.3669012144316433\n",
            "\n",
            "EPOCH 8 of 50\n",
            "\n",
            "The training loss for Epoch 8 is 1.4071393218260722\n",
            "The validation loss for Epoch 8 is 1.3443895841345446\n",
            "\n",
            "EPOCH 9 of 50\n",
            "\n",
            "The training loss for Epoch 9 is 1.3212397933683795\n",
            "The validation loss for Epoch 9 is 1.1038955649937798\n",
            "\n",
            "EPOCH 10 of 50\n",
            "\n",
            "The training loss for Epoch 10 is 1.4611368292870563\n",
            "The validation loss for Epoch 10 is 1.2177039458011594\n",
            "\n",
            "EPOCH 11 of 50\n",
            "\n",
            "The training loss for Epoch 11 is 1.2098797968085329\n",
            "The validation loss for Epoch 11 is 1.0350096476076447\n",
            "\n",
            "EPOCH 12 of 50\n",
            "\n",
            "The training loss for Epoch 12 is 1.069225803525997\n",
            "The validation loss for Epoch 12 is 0.8512925480763939\n",
            "\n",
            "EPOCH 13 of 50\n",
            "\n",
            "The training loss for Epoch 13 is 1.0181799444220887\n",
            "The validation loss for Epoch 13 is 0.8627653160977843\n",
            "\n",
            "EPOCH 14 of 50\n",
            "\n",
            "The training loss for Epoch 14 is 0.7877502463492798\n",
            "The validation loss for Epoch 14 is 0.5722880547694661\n",
            "\n",
            "EPOCH 15 of 50\n",
            "\n",
            "The training loss for Epoch 15 is 0.897971142182877\n",
            "The validation loss for Epoch 15 is 0.8049673214960917\n",
            "\n",
            "EPOCH 16 of 50\n",
            "\n",
            "The training loss for Epoch 16 is 0.8538826965959119\n",
            "The validation loss for Epoch 16 is 0.5383993239803203\n",
            "\n",
            "EPOCH 17 of 50\n",
            "\n",
            "The training loss for Epoch 17 is 0.6310460660724531\n",
            "The validation loss for Epoch 17 is 0.5492505366730587\n",
            "\n",
            "EPOCH 18 of 50\n",
            "\n",
            "The training loss for Epoch 18 is 0.6294178562686132\n",
            "The validation loss for Epoch 18 is 0.5465871479139258\n",
            "\n",
            "EPOCH 19 of 50\n",
            "\n",
            "The training loss for Epoch 19 is 0.4717211363175732\n",
            "The validation loss for Epoch 19 is 0.5007218282209909\n",
            "\n",
            "EPOCH 20 of 50\n",
            "\n",
            "The training loss for Epoch 20 is 0.6039081595967403\n",
            "The validation loss for Epoch 20 is 1.0635124314539346\n",
            "\n",
            "EPOCH 21 of 50\n",
            "\n",
            "The training loss for Epoch 21 is 0.6086907285917444\n",
            "The validation loss for Epoch 21 is 0.3992809158046095\n",
            "\n",
            "EPOCH 22 of 50\n",
            "\n",
            "The training loss for Epoch 22 is 0.31481229160815677\n",
            "The validation loss for Epoch 22 is 0.4661204483640507\n",
            "\n",
            "EPOCH 23 of 50\n",
            "\n",
            "The training loss for Epoch 23 is 0.2817908157060821\n",
            "The validation loss for Epoch 23 is 0.6031624298368115\n",
            "\n",
            "EPOCH 24 of 50\n",
            "\n",
            "The training loss for Epoch 24 is 0.21379575200139833\n",
            "The validation loss for Epoch 24 is 0.2762778910890285\n",
            "\n",
            "EPOCH 25 of 50\n",
            "\n",
            "The training loss for Epoch 25 is 0.26702083518541264\n",
            "The validation loss for Epoch 25 is 0.46256100086770446\n",
            "\n",
            "EPOCH 26 of 50\n",
            "\n",
            "The training loss for Epoch 26 is 0.2506168795133525\n",
            "The validation loss for Epoch 26 is 0.42519858286647255\n",
            "\n",
            "EPOCH 27 of 50\n",
            "\n",
            "The training loss for Epoch 27 is 0.15231008861173118\n",
            "The validation loss for Epoch 27 is 0.1517153832333861\n",
            "\n",
            "EPOCH 28 of 50\n",
            "\n",
            "The training loss for Epoch 28 is 0.24483832106451284\n",
            "The validation loss for Epoch 28 is 0.22950603837535627\n",
            "\n",
            "EPOCH 29 of 50\n",
            "\n",
            "The training loss for Epoch 29 is 0.08951374390476935\n",
            "The validation loss for Epoch 29 is 0.2182165932049181\n",
            "\n",
            "EPOCH 30 of 50\n",
            "\n",
            "The training loss for Epoch 30 is 0.023964128999018914\n",
            "The validation loss for Epoch 30 is 0.28903189445673805\n",
            "\n",
            "EPOCH 31 of 50\n",
            "\n",
            "The training loss for Epoch 31 is 0.03169782661199927\n",
            "The validation loss for Epoch 31 is 1.4600021695378183\n",
            "\n",
            "EPOCH 32 of 50\n",
            "\n",
            "The training loss for Epoch 32 is 0.24628731226170583\n",
            "The validation loss for Epoch 32 is 0.5413015526877685\n",
            "\n",
            "EPOCH 33 of 50\n",
            "\n",
            "The training loss for Epoch 33 is 0.25811409891243803\n",
            "The validation loss for Epoch 33 is 0.1332954504080011\n",
            "\n",
            "EPOCH 34 of 50\n",
            "\n",
            "The training loss for Epoch 34 is 0.11326107563271812\n",
            "The validation loss for Epoch 34 is 0.13966016277362625\n",
            "\n",
            "EPOCH 35 of 50\n",
            "\n",
            "The training loss for Epoch 35 is 0.08266097443591182\n",
            "The validation loss for Epoch 35 is 0.7599932260269849\n",
            "\n",
            "EPOCH 36 of 50\n",
            "\n",
            "The training loss for Epoch 36 is 0.2466315473014324\n",
            "The validation loss for Epoch 36 is 0.924010707134144\n",
            "\n",
            "EPOCH 37 of 50\n",
            "\n",
            "The training loss for Epoch 37 is 0.08281704771695998\n",
            "The validation loss for Epoch 37 is 0.029483203349734182\n",
            "\n",
            "EPOCH 38 of 50\n",
            "\n",
            "The training loss for Epoch 38 is 0.0074327003499593605\n",
            "The validation loss for Epoch 38 is 0.029648236894051522\n",
            "\n",
            "EPOCH 39 of 50\n",
            "\n",
            "The training loss for Epoch 39 is 0.01911186427993008\n",
            "The validation loss for Epoch 39 is 0.04038800803247307\n",
            "\n",
            "EPOCH 40 of 50\n",
            "\n",
            "The training loss for Epoch 40 is 0.0022181910589127865\n",
            "The validation loss for Epoch 40 is 0.05070397788846812\n",
            "\n",
            "EPOCH 41 of 50\n",
            "\n",
            "The training loss for Epoch 41 is 0.001202950255349987\n",
            "The validation loss for Epoch 41 is 0.05280171293197342\n",
            "\n",
            "EPOCH 42 of 50\n",
            "\n",
            "The training loss for Epoch 42 is 0.0008114798900290207\n",
            "The validation loss for Epoch 42 is 0.05541832708208626\n",
            "\n",
            "EPOCH 43 of 50\n",
            "\n",
            "The training loss for Epoch 43 is 0.0005712983237174706\n",
            "The validation loss for Epoch 43 is 0.057825375609843764\n",
            "\n",
            "EPOCH 44 of 50\n",
            "\n",
            "The training loss for Epoch 44 is 0.000414979997902836\n",
            "The validation loss for Epoch 44 is 0.06012216266543465\n",
            "\n",
            "EPOCH 45 of 50\n",
            "\n",
            "The training loss for Epoch 45 is 0.0003064211355704214\n",
            "The validation loss for Epoch 45 is 0.062136569963789676\n",
            "\n",
            "EPOCH 46 of 50\n",
            "\n",
            "The training loss for Epoch 46 is 0.00022877669718656248\n",
            "The validation loss for Epoch 46 is 0.06302598480151224\n",
            "\n",
            "EPOCH 47 of 50\n",
            "\n",
            "The training loss for Epoch 47 is 0.00017204542739605926\n",
            "The validation loss for Epoch 47 is 0.06507867136105071\n",
            "\n",
            "EPOCH 48 of 50\n",
            "\n",
            "The training loss for Epoch 48 is 0.00013004691355100384\n",
            "The validation loss for Epoch 48 is 0.06695243634048777\n",
            "\n",
            "EPOCH 49 of 50\n",
            "\n",
            "The training loss for Epoch 49 is 9.769989279092427e-05\n",
            "The validation loss for Epoch 49 is 0.06803613796581852\n",
            "\n",
            "EPOCH 50 of 50\n",
            "\n",
            "The training loss for Epoch 50 is 7.425828202957299e-05\n",
            "The validation loss for Epoch 50 is 0.06786038592458978\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "M57LENMrdCL-",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 387
        },
        "outputId": "74b892d0-8482-4dfe-8475-1546ef2d9756"
      },
      "source": [
        "\n",
        "model = torch.load('/content/gdrive/MyDrive/best_model.pth')\n",
        "# 45ish epoch model https://drive.google.com/file/d/1SzOCnZ5kWuuEQ5GpYz9TAqYbjwYfP5kZ/view?usp=sharing\n",
        "# Accuracies are 98/96/82\n",
        "\n",
        "################ Model Accuracy On Train Dataset Post Training #################\n",
        "\n",
        "accurates = 0\n",
        "for input, label in train_dataloader:\n",
        "  input = input.cuda()\n",
        "  out = model(input)\n",
        "  if torch.argmax(out).item() == label:\n",
        "    accurates += 1\n",
        "\n",
        "accuracy = accurates / len(train_dataloader)\n",
        "print('The model accuracy on the train dataset after training is ' + str(accuracy))\n",
        "\n",
        "################ Model Accuracy On Validation Dataset Post Training #################\n",
        "accurates = 0\n",
        "for input, label in val_dataloader:\n",
        "  input = input.cuda()\n",
        "  out = model(input)\n",
        "  if torch.argmax(out).item() == label:\n",
        "    accurates += 1\n",
        "\n",
        "accuracy = accurates / len(val_dataloader)\n",
        "print('The model accuracy on the validation dataset after training is ' + str(accuracy))\n",
        "    "
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "The model accuracy on the train dataset after training is 0.9821029082774049\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-6-772e3fc7581f>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     18\u001b[0m \u001b[0;31m################ Model Accuracy On Validation Dataset Post Training #################\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m \u001b[0maccurates\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 20\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mval_dataloader\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     21\u001b[0m   \u001b[0minput\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcuda\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     22\u001b[0m   \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-3-cc22f36a2a9e>\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, idx)\u001b[0m\n\u001b[1;32m     47\u001b[0m         c3d_file_location = os.path.join(self.root_dir,\n\u001b[1;32m     48\u001b[0m                                 self.list_c3d[idx])\n\u001b[0;32m---> 49\u001b[0;31m         \u001b[0msample\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mc3d2array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mc3d_file_location\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mframe_rate\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     50\u001b[0m         \u001b[0mlabel_location\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mc3d_file_location\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfind\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'_a'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     51\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mlabel_location\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;31m# FUCK T-POSE\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-3-cc22f36a2a9e>\u001b[0m in \u001b[0;36mc3d2array\u001b[0;34m(loc, frame_rate)\u001b[0m\n\u001b[1;32m     11\u001b[0m     \u001b[0mpoint_series\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m     \u001b[0mreader\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mc3d\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'rb'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m     \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpoints\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0manalog\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mreader\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mi\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0mframe_rate\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;31m## Set Frame Rate to approximately 22 Hz instead of 480 Hz\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m             \u001b[0mpoint_series\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpoints\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/c3d.py\u001b[0m in \u001b[0;36mread_frames\u001b[0;34m(self, copy)\u001b[0m\n\u001b[1;32m    873\u001b[0m             \u001b[0mvalid\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mraw\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m3\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    874\u001b[0m             \u001b[0mpoints\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m~\u001b[0m\u001b[0mvalid\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m3\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 875\u001b[0;31m             \u001b[0mc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mraw\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mvalid\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m3\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0muint16\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    876\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    877\u001b[0m             \u001b[0;31m# fourth value is floating-point (scaled) error estimate\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PQ7-c37dpX2A",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "696204c8-f6ec-42a4-e92d-3a7d0f9b0457"
      },
      "source": [
        "accurates = 0\n",
        "for input, label in test_dataloader:\n",
        "  input = input.cuda()\n",
        "  out = model(input)\n",
        "  if torch.argmax(out).item() == label:\n",
        "    accurates += 1\n",
        "\n",
        "accuracy = accurates / len(test_dataloader)\n",
        "print('The model accuracy on the testing dataset after training is ' + str(accuracy))"
      ],
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "The model accuracy on the testing dataset after training is 0.7857142857142857\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IZhSlQumNxup",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 195
        },
        "outputId": "b2b49f6c-995e-4d4e-a3a7-dd0431ef85de"
      },
      "source": [
        "plt.plot(train_loss_vec)\n",
        "plt.plot(val_loss_vec)\n",
        "plt.xlabel('Epochs'), plt.ylabel('Cross Entropy Loss')"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-8-41df40ff43f3>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_loss_vec\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mval_loss_vec\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxlabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Epochs'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mylabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Cross Entropy Loss'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'train_loss_vec' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 303
        },
        "id": "_EVi7IUF9EEU",
        "outputId": "b066ce96-4743-4ed1-b3d1-c3e4c3563919"
      },
      "source": [
        "model = torch.load('/content/gdrive/MyDrive/best_model.pth')"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "error",
          "ename": "RuntimeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mRuntimeError\u001b[0m                              Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-11-fe44a74ca388>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/content/gdrive/MyDrive/best_model.pth'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/serialization.py\u001b[0m in \u001b[0;36mload\u001b[0;34m(f, map_location, pickle_module, **pickle_load_args)\u001b[0m\n\u001b[1;32m    590\u001b[0m                     \u001b[0mopened_file\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mseek\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0morig_position\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    591\u001b[0m                     \u001b[0;32mreturn\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjit\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mopened_file\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 592\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0m_load\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mopened_zipfile\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmap_location\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpickle_module\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mpickle_load_args\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    593\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0m_legacy_load\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mopened_file\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmap_location\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpickle_module\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mpickle_load_args\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    594\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/serialization.py\u001b[0m in \u001b[0;36m_load\u001b[0;34m(zip_file, map_location, pickle_module, pickle_file, **pickle_load_args)\u001b[0m\n\u001b[1;32m    849\u001b[0m     \u001b[0munpickler\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpickle_module\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mUnpickler\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata_file\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mpickle_load_args\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    850\u001b[0m     \u001b[0munpickler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpersistent_load\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpersistent_load\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 851\u001b[0;31m     \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0munpickler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    852\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    853\u001b[0m     \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_utils\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_loaded_sparse_tensors\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/serialization.py\u001b[0m in \u001b[0;36mpersistent_load\u001b[0;34m(saved_id)\u001b[0m\n\u001b[1;32m    841\u001b[0m         \u001b[0mdata_type\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlocation\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msize\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    842\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mkey\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mloaded_storages\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 843\u001b[0;31m             \u001b[0mload_tensor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata_type\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msize\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_maybe_decode_ascii\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlocation\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    844\u001b[0m         \u001b[0mstorage\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mloaded_storages\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    845\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mstorage\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/serialization.py\u001b[0m in \u001b[0;36mload_tensor\u001b[0;34m(data_type, size, key, location)\u001b[0m\n\u001b[1;32m    830\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    831\u001b[0m         \u001b[0mstorage\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mzip_file\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_storage_from_record\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msize\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstorage\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 832\u001b[0;31m         \u001b[0mloaded_storages\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrestore_location\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstorage\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlocation\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    833\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    834\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mpersistent_load\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msaved_id\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/serialization.py\u001b[0m in \u001b[0;36mdefault_restore_location\u001b[0;34m(storage, location)\u001b[0m\n\u001b[1;32m    173\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mdefault_restore_location\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstorage\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlocation\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    174\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0m_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfn\u001b[0m \u001b[0;32min\u001b[0m \u001b[0m_package_registry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 175\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstorage\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlocation\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    176\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mresult\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    177\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/serialization.py\u001b[0m in \u001b[0;36m_cuda_deserialize\u001b[0;34m(obj, location)\u001b[0m\n\u001b[1;32m    155\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mstorage_type\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    156\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 157\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcuda\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    158\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    159\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/_utils.py\u001b[0m in \u001b[0;36m_cuda\u001b[0;34m(self, device, non_blocking, **kwargs)\u001b[0m\n\u001b[1;32m     78\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     79\u001b[0m             \u001b[0mnew_type\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcuda\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__class__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__name__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 80\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mnew_type\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy_\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnon_blocking\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     81\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     82\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mRuntimeError\u001b[0m: CUDA error: device-side assert triggered"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OJOXCF4V-jZ1",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9da5e38e-7418-4a8c-ff3c-55abec706696"
      },
      "source": [
        "from torch.autograd import Variable\n",
        "class GradientAttack():\n",
        "        \n",
        "        \"\"\"\n",
        "        \n",
        "        \"\"\"\n",
        "        \n",
        "        def __init__(self, loss, epsilon):\n",
        "            \"\"\"\n",
        "            \n",
        "            \"\"\"\n",
        "            self.loss = loss\n",
        "            self.epsilon = epsilon\n",
        "\n",
        "        def forward(self, x, y, model, num_iter=1, alpha=0.01):\n",
        "            \"\"\"\n",
        "            Generates an adversary using the gradient sign method\n",
        "            given an input feature, its associated label, and the model\n",
        "            x: feature vector\n",
        "            y: label associated with the feature vector\n",
        "            model: the model used to classify x\n",
        "            num_iter: number of iterations to perturb sample, for num_iter=1, uses fast gradient sign method\n",
        "            alpha: the size of the perturbation for iterative gradient sign method         \n",
        "            \"\"\"\n",
        "            y = torch.Tensor([y]).cuda()\n",
        "            x = x.cuda()\n",
        "            model.train()\n",
        "            x_adv = x\n",
        "            for iteration in range(num_iter):\n",
        "                x_adv = x_adv.cuda()\n",
        "                x_adv = Variable(x_adv, requires_grad=True)\n",
        "                # Step 1: Calculate the Loss and then calculate the\n",
        "                # gradient of the Loss w.r.t the image\n",
        "                loss_adv = self.loss(model(x_adv).unsqueeze(0), y.long())\n",
        "                loss_adv.backward(retain_graph=True) \n",
        "                with torch.no_grad():\n",
        "                    # Step 2: Add the gradient (or its sign for each pixel),\n",
        "                    # multiplied by a small step size, to the original image                   \n",
        "                    # You might need to clamp the modified image to \n",
        "                    # make sure the values of each pixel are between [0,1]    \n",
        "                    if num_iter > 1:                                                           \n",
        "                        x_temp = x_adv + torch.sign(x_adv.grad) * alpha\n",
        "                        # Clamp the attack to be within such that the maximum difference is epsilon\n",
        "                        x_adv = x + torch.clamp(x - x_temp, -self.epsilon, self.epsilon)\n",
        "                    else:\n",
        "                        x_adv = x + torch.sign(x_adv.grad) * self.epsilon\n",
        "            return x_adv\n",
        "\n",
        "loss = nn.CrossEntropyLoss()\n",
        "adv_attack = GradientAttack(loss, 0.1)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "################ Model Accuracy On Train Dataset Against Attacks#################\n",
        "accurates = 0\n",
        "for input, label in train_dataloader:\n",
        "    if label == 11: \n",
        "        continue\n",
        "    input_adv = adv_attack.forward(input, label, model, num_iter=1)\n",
        "    model.eval()\n",
        "    out = model(input_adv)\n",
        "    if torch.argmax(out).item() == label:\n",
        "        accurates += 1\n",
        "\n",
        "accuracy = accurates / len(train_dataloader)\n",
        "print('The model accuracy on the train dataset after training is ' + str(accuracy))\n",
        "\n",
        "################ Model Accuracy On Validation Dataset Against Attacks #################\n",
        "accurates = 0\n",
        "for input, label in val_dataloader:\n",
        "    if label == 11: \n",
        "        continue\n",
        "    input_adv = adv_attack.forward(input, label, model, num_iter=1)\n",
        "    model.eval()\n",
        "    out = model(input_adv)\n",
        "    if torch.argmax(out).item() == label:\n",
        "        accurates += 1\n",
        "\n",
        "accuracy = accurates / len(val_dataloader)\n",
        "print('The model accuracy on the validation dataset after training is ' + str(accuracy))\n",
        "\n",
        "################ Model Accuracy On Test Dataset Against Attacks#################    \n",
        "accurates = 0\n",
        "for input, label in test_dataloader:\n",
        "    if label == 11: \n",
        "        continue\n",
        "    input_adv = adv_attack.forward(input, label, model, num_iter=1)\n",
        "    model.eval()\n",
        "    out = model(input_adv)\n",
        "    if torch.argmax(out).item() == label:\n",
        "        accurates += 1\n",
        "\n",
        "accuracy = accurates / len(test_dataloader)\n",
        "print('The model accuracy on the testing dataset after training is ' + str(accuracy))\n"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "The model accuracy on the train dataset after training is 0.8568232662192393\n",
            "The model accuracy on the validation dataset after training is 0.7678571428571429\n",
            "The model accuracy on the testing dataset after training is 0.6190476190476191\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TmbTnlI-d9Jo"
      },
      "source": [
        "################ Model Accuracy On Train Dataset Against Attacks#################\n",
        "accurates = 0\n",
        "for input, label in train_dataloader:\n",
        "    if label == 11: \n",
        "      continue\n",
        "    input_adv = adv_attack.forward(input, label, model, num_iter=200, alpha=0.25)\n",
        "    model.eval()\n",
        "    out = model(input_adv)\n",
        "    if torch.argmax(out).item() == label:\n",
        "      accurates += 1\n",
        "\n",
        "accuracy = accurates / len(train_dataloader)\n",
        "print('The model accuracy on the train dataset after training is ' + str(accuracy))\n",
        "\n",
        "################ Model Accuracy On Validation Dataset Against Attacks#################\n",
        "accurates = 0\n",
        "for input, label in val_dataloader:\n",
        "    if label == 11: \n",
        "          continue\n",
        "    input_adv = adv_attack.forward(input, label, model, num_iter=200, alpha=0.25)\n",
        "    model.eval()\n",
        "    out = model(input_adv)\n",
        "    if torch.argmax(out).item() == label:\n",
        "      accurates += 1\n",
        "\n",
        "accuracy = accurates / len(val_dataloader)\n",
        "print('The model accuracy on the validation dataset after training is ' + str(accuracy))\n",
        "\n",
        "\n",
        "################ Model Accuracy On Test Dataset Against Attacks#################\n",
        "accurates = 0\n",
        "for input, label in test_dataloader:\n",
        "    if label == 11: \n",
        "          continue\n",
        "    input_adv = adv_attack.forward(input, label, model, num_iter=200, alpha=0.25)\n",
        "    model.eval()\n",
        "    out = model(input_adv)\n",
        "    if torch.argmax(out).item() == label:\n",
        "      accurates += 1\n",
        "\n",
        "accuracy = accurates / len(test_dataloader)\n",
        "print('The model accuracy on the testing dataset after training is ' + str(accuracy))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jhCllQ4n_Ctl",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 761
        },
        "outputId": "f0590de4-c692-4e56-94a0-bfbac8fdd027"
      },
      "source": [
        "## This code is for the case in which the sample IS flattened\n",
        "i = 3\n",
        "for input, _ in train_dataloader:\n",
        "  orig_input = input\n",
        "  input = input.cuda()\n",
        "  input = Variable(input, requires_grad=True)\n",
        "  model.train()\n",
        "  sample = adv_attack.forward(input, label, model, 200).cpu().detach()\n",
        "  if i == 0:\n",
        "    break\n",
        "  i = i - 1\n",
        "  frame = 1\n",
        "  xs, ys, zs = sample[0, frame, 0:43], sample[0, frame, 43:86], sample[0, frame, 86:]\n",
        "  plt.figure()\n",
        "  plt.scatter(xs, zs)\n",
        "  plt.axis('scaled')\n",
        "  xs, ys, zs = orig_input[0, frame, 0:43], orig_input[0, frame, 43:86], orig_input[0, frame, 86:]\n",
        "  plt.scatter(xs, zs)\n",
        "  plt.axis('scaled')"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jM-wZF0EPr7c"
      },
      "source": [
        "Probably should use 20 or so epochs based on these results"
      ]
    }
  ]
}